from tkinter import *
from tkinter import ttk
import os
import mysql.connector
import base64
from tkinter import messagebox

connection = False
if os.path.exists('saved_credentials.txt'):
    with open('saved_credentials.txt', 'r') as file:
        encoded_data = file.read().strip()
    encoded_host, encoded_user, encoded_password = encoded_data.split(';')
    host = base64.b64decode(encoded_host.encode()).decode()
    user = base64.b64decode(encoded_user.encode()).decode()
    password = base64.b64decode(encoded_password.encode()).decode()
else:
    def save_credentials():
        global host; global user; global password
        host = host_entry.get()
        user = user_entry.get()
        password = password_entry.get()
        with open('saved_credentials.txt', 'w') as file:
            encoded_host = base64.b64encode(host.encode()).decode()
            encoded_user = base64.b64encode(user.encode()).decode()
            encoded_password = base64.b64encode(password.encode()).decode()
            file.write(f"{encoded_host};{encoded_user};{encoded_password}")
        window.destroy()
    window = Tk()
    window.iconbitmap('./hospital.ico')
    window.title("Credentials Input")
    window.geometry("300x200")
    window.resizable(False, False)
    host_label = Label(window, text="Host:")
    host_label.pack()
    host_entry = Entry(window)
    host_entry.pack()
    user_label = Label(window, text="User:")
    user_label.pack()
    user_entry = Entry(window)
    user_entry.pack()
    password_label = Label(window, text="Password:")
    password_label.pack()
    password_entry = Entry(window, show="*")  # Use 'show' to hide password characters
    password_entry.pack()
    save_button = Button(window, text="Connect", command=save_credentials)
    save_button.pack()
    window.mainloop()
try:
    conn = mysql.connector.connect(host=host, user=user, password=password)
    if conn.is_connected():
        messagebox.showinfo("Connected", "You are connected!")
        connection = True
        conn.close()
    else:
        messagebox.showerror("Connection failed")
except mysql.connector.Error as e:
    messagebox.showerror("Error", f"Invalid Credentials\n{e}")
    if os.path.exists('saved_credentials.txt'):
        os.remove('saved_credentials.txt')
if connection:
    conn = mysql.connector.connect(host=host, user=user, password=password, database='hospital_db')
    cursor = conn.cursor()
    root = Tk()
    root.iconbitmap('./hospital.ico')
    root.title("Hospital Manager")

    notebook = ttk.Notebook(root)

    tab1 = ttk.Frame(notebook)
    tab2 = ttk.Frame(notebook)
    tab3 = ttk.Frame(notebook)
    notebook.add(tab1, text="Patients")
    notebook.add(tab2, text="Doctors")
    notebook.add(tab3, text="Appointments")
    
    # Tab1 Patients:
    # "Name", "Specialization", "Fees", "Deadline"
    def add_patient():
        name = e1_tab1.get()
        specialization = e2_tab1.get()
        fees = e3_tab1.get()
        deadline = e4_tab1.get()

        if name != '' and specialization != '' and fees != '' and deadline != '':
            insert_query = "INSERT INTO Patients (name, specialization, fees, deadline) VALUES (%s, %s, %s, %s)"
            data = (name, specialization, fees, deadline)
            cursor.execute(insert_query, data)
            conn.commit()

        e1_tab1.delete(0, END)
        e2_tab1.delete(0, END)
        e3_tab1.delete(0, END)
        e4_tab1.delete(0, END)
        populate_patient_tree(tree_tab1)
        
    def delete_patient():
        patient_id = e5_tab1.get()

        if patient_id != '':
            # Delete the patient
            delete_query = "DELETE FROM Patients WHERE id = %s"
            data = (patient_id,)
            cursor.execute(delete_query, data)
            conn.commit()

            # Update the IDs to be sequential
            update_query = "SET @counter = 0;"
            cursor.execute(update_query)
            conn.commit()

            update_query = "UPDATE Patients SET id = @counter := @counter + 1;"
            cursor.execute(update_query)
            conn.commit()

            update_query = "ALTER TABLE Patients AUTO_INCREMENT = 1;"
            cursor.execute(update_query)
            conn.commit()

            # Fetch the data again after updating IDs
            populate_patient_tree(tree_tab1)

        e5_tab1.delete(0, END)


    def populate_patient_tree(tree):
        # Select all patient data from the Patients table
        select_query = "SELECT * FROM Patients"

        cursor.execute(select_query)
        patients = cursor.fetchall()

        for item in tree.get_children():
            tree.delete(item)
        for patient in patients:
            tree.insert("", "end", values=patient)

    shift = 250
    Label(tab1, text="Name").place(x=10 + shift, y=10)
    e1_tab1 = Entry(tab1, width=30, bg="#FFFFFF")
    e1_tab1.place(x=120 + shift, y=10)

    Label(tab1, text="Specialization").place(x=10 + shift, y=40)
    e2_tab1 = Entry(tab1, width=30, bg="#FFFFFF")
    e2_tab1.place(x=120 + shift, y=40)

    Label(tab1, text="Fees").place(x=10 + shift, y=70)
    e3_tab1 = Entry(tab1, width=30, bg="#FFFFFF")
    e3_tab1.place(x=120 + shift, y=70)

    Label(tab1, text="Deadline").place(x=10 + shift, y=100)
    e4_tab1 = Entry(tab1, width=30, bg="#FFFFFF")
    e4_tab1.place(x=120 + shift, y=100)

    Button(tab1, text="Add Patient", command=add_patient).place(x=10 + shift, y=130, width=300)

    Label(tab1,text="Delete Patient ID").place(x = 10 + shift, y = 160)
    e5_tab1 = Entry(tab1,width=30, bg="#FFFFFF")
    e5_tab1.place(x = 120 + shift,y = 160 )

    Button(tab1,text="Delete",command=delete_patient).place(x=10+shift,y=190,width=300)

    # Create a Treeview widget to display patient data
    tree_tab1 = ttk.Treeview(tab1, columns=("ID", "Name", "Specialization", "Fees", "Deadline"), show="headings", height=10)
    tree_tab1.heading("ID", text="ID")
    tree_tab1.heading("Name", text="Name")
    tree_tab1.heading("Specialization", text="Specialization")
    tree_tab1.heading("Fees", text="Fees")
    tree_tab1.heading("Deadline", text="Deadline")

    # Set column widths
    tree_tab1.column("ID", width=50)
    tree_tab1.column("Name", width=160)
    tree_tab1.column("Specialization", width=160)
    tree_tab1.column("Fees", width=160)
    tree_tab1.column("Deadline", width=170)

    # Set a specific height for the Treeview
    tree_tab1_height = 500
    tree_tab1.place(x=10, y=220, relwidth=1, height=tree_tab1_height)

    # Create a vertical scrollbar
    tree_scroll_y = ttk.Scrollbar(tab1, orient="vertical", command=tree_tab1.yview)
    tree_tab1.configure(yscroll=tree_scroll_y.set)
    tree_scroll_y.place(x= 780, y=220, height=tree_tab1_height)

    # Configure the Treeview to expand vertically
    tree_tab1.grid_propagate(False)

    # Populate the treeview initially
    populate_patient_tree(tree_tab1)
    
    # Tab 2 Doctors:
    def add_doctor():
        name = e1_tab2.get()
        specialization = e2_tab2.get()
        working_hour = e3_tab2.get()

        if name != '' and specialization != '' and working_hour != '':
            insert_query = "INSERT INTO Doctors (name, specialization, working_hour) VALUES (%s, %s, %s)"
            data = (name, specialization, working_hour)
            cursor.execute(insert_query, data)
            conn.commit()

        e1_tab2.delete(0, END)
        e2_tab2.delete(0, END)
        e3_tab2.delete(0, END)
        populate_doctor_tree(tree_tab2)

    def delete_doctor():
        doctor_id = e4_tab2.get()

        if doctor_id != '':
            # Delete the doctor
            delete_query = "DELETE FROM Doctors WHERE id = %s"
            data = (doctor_id,)
            cursor.execute(delete_query, data)
            conn.commit()

            # Update the IDs to be sequential
            update_query = "SET @counter = 0;"
            cursor.execute(update_query)
            conn.commit()

            update_query = "UPDATE Doctors SET id = @counter := @counter + 1;"
            cursor.execute(update_query)
            conn.commit()

            update_query = "ALTER TABLE Doctors AUTO_INCREMENT = 1;"
            cursor.execute(update_query)
            conn.commit()

            # Fetch the data again after updating IDs
            populate_doctor_tree(tree_tab2)

        e4_tab2.delete(0, END)


    def populate_doctor_tree(tree):
        # Select all doctor data from the Doctors table
        select_query = "SELECT * FROM Doctors"

        cursor.execute(select_query)
        doctors = cursor.fetchall()

        for item in tree.get_children():
            tree.delete(item)
        for doctor in doctors:
            tree.insert("", "end", values=doctor)

    shift_tab2 = 250
    Label(tab2, text="Name").place(x=10 + shift_tab2, y=10)
    e1_tab2 = Entry(tab2, width=30, bg="#FFFFFF")
    e1_tab2.place(x=120 + shift_tab2, y=10)

    Label(tab2, text="Specialization").place(x=10 + shift_tab2, y=40)
    e2_tab2 = Entry(tab2, width=30, bg="#FFFFFF")
    e2_tab2.place(x=120 + shift_tab2, y=40)

    Label(tab2, text="Working Hour").place(x=10 + shift_tab2, y=70)
    e3_tab2 = Entry(tab2, width=30, bg="#FFFFFF")
    e3_tab2.place(x=120 + shift_tab2, y=70)

    Button(tab2, text="Add Doctor", command=add_doctor).place(x=10 + shift_tab2, y=100, width=300)

    Label(tab2, text="Delete Doctor ID").place(x=10 + shift_tab2, y=130)
    e4_tab2 = Entry(tab2, width=30, bg="#FFFFFF")
    e4_tab2.place(x=120 + shift_tab2, y=130)

    Button(tab2, text="Delete", command=delete_doctor).place(x=10 + shift_tab2, y=160, width=300)

    # Create a Treeview widget to display doctor data
    tree_tab2 = ttk.Treeview(tab2, columns=("ID", "Name", "Specialization", "Working Hour"), show="headings", height=10)
    tree_tab2.heading("ID", text="ID")
    tree_tab2.heading("Name", text="Name")
    tree_tab2.heading("Specialization", text="Specialization")
    tree_tab2.heading("Working Hour", text="Working Hour")

    # Set column widths
    tree_tab2.column("ID", width=50)
    tree_tab2.column("Name", width=160)
    tree_tab2.column("Specialization", width=160)
    tree_tab2.column("Working Hour", width=160)

    # Set a specific height for the Treeview
    tree_tab2_height = 500
    tree_tab2.place(x=10, y=220, relwidth=1, height=tree_tab2_height)

    # Create a vertical scrollbar
    tree_scroll_y_tab2 = ttk.Scrollbar(tab2, orient="vertical", command=tree_tab2.yview)
    tree_tab2.configure(yscroll=tree_scroll_y_tab2.set)
    tree_scroll_y_tab2.place(x=780, y=220, height=tree_tab2_height)

    # Configure the Treeview to expand vertically
    tree_tab2.grid_propagate(False)

    # Populate the treeview initially
    populate_doctor_tree(tree_tab2)

    

    notebook.pack(expand=True, fill="both")
    root.geometry("800x750")
    root.resizable(0, 0)
    root.mainloop()

    # Close the cursor and connection when done
    cursor.close()
    conn.close()
